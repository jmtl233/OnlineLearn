{"remainingRequest":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\OnlineLearn\\src\\OnlineLearnVue\\node_modules\\babel-loader\\lib\\index.js!D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\OnlineLearn\\src\\OnlineLearnVue\\src\\plugins\\initialize.js","dependencies":[{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\OnlineLearn\\src\\OnlineLearnVue\\src\\plugins\\initialize.js","mtime":1706433060988},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\OnlineLearn\\src\\OnlineLearnVue\\babel.config.js","mtime":1662558190268},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\OnlineLearn\\src\\OnlineLearnVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\OnlineLearn\\src\\OnlineLearnVue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/OnlineLearn/src/OnlineLearnVue/src/plugins/initialize.js"],"names":["init","enHead","enBody","el","document","createElement","from","innerHTML","head","appendChild","CTIME","IS_THROTTLED","toLoad","EXCLUDE_INNER_TEXTS","undefined","Array","isArray","Error","setTimeout","tagList","forEach","value","loadTag","tagName","elements","startsWith","element","getElementById","replace","push","getElementsByClassName","getElementsByTagName","i","key","json1","hasOwnProperty","v","j","length","includes","t","textSize","iSize","ts","split","parseInt","hasITagWithClass","updateITag","updateElement","json2","computedStyle","getComputedStyle","fontSize","getPropertyValue","style","Vue","mixin","mounted","$nextTick","text","coder","TextDecoder","deData","decode","Uint8Array","atob","c","charCodeAt","suffix","iclass","classList","contains","iTags","querySelectorAll","temp","temp2","iTagsWithSize","textInclude","iTag","remove","newITag","className","setAttribute","firstChild","insertBefore","enTagList","enJson1","enJson2","to","TextEncoder","data","encode","enData","btoa","String","fromCharCode","apply","console","log","jsonTagStr","JSON","stringify","json1Str","json2Str","checkJson1","checkJson2","checkTagJson"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,GAAgB;AACd,MAAMC,MAAM,GAAG,8ntDAAf;AACA,MAAMC,MAAM,GAAG,0oEAAf;AACA,MAAMC,EAAE,GAAGC,QAAQ,CAACC,aAAT,CAAuBC,IAAI,CAAC,UAAD,CAA3B,CAAX;AACAH,EAAAA,EAAE,CAACI,SAAH,GAAeD,IAAI,CAACL,MAAD,CAAJ,GAAeK,IAAI,CAACJ,MAAD,CAAlC;AACAE,EAAAA,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,EAA1B;AACD;;AAED,CAAC,YAAW;AACVH,EAAAA,IAAI;AACL,CAFD;;AAIA,IAAMU,KAAK,GAAG,CAAd;AACA,IAAIC,YAAY,GAAG,IAAnB;AAEA,OAAO,SAASC,MAAT,CAAgBC,mBAAhB,EAAqC;AAE1C,MAAGA,mBAAmB,IAAIC,SAAvB,IAAoC,CAACC,KAAK,CAACC,OAAN,CAAcH,mBAAd,CAAxC,EAA4E;AAC1E,UAAM,IAAII,KAAJ,EAAN;AACD;;AAED,MAAIN,YAAJ,EAAkB;AAChBO,IAAAA,UAAU,CAAC,YAAM;AACf;AACAC,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,KAAD,EAAW;AACzBC,QAAAA,OAAO,CAACD,KAAD,EAAQR,mBAAR,CAAP;AACD,OAFD;AAGD,KALS,EAKP,EALO,CAAV;AAQAF,IAAAA,YAAY,GAAG,KAAf;AACAO,IAAAA,UAAU,CAAC,YAAM;AACfP,MAAAA,YAAY,GAAG,IAAf;AACD,KAFS,EAEPD,KAFO,CAAV;AAGD;AACF;;AAED,SAASY,OAAT,CAAiBC,OAAjB,EAA0BV,mBAA1B,EAA+C;AAC7C,MAAIW,QAAQ,GAAG,EAAf;;AACA,MAAID,OAAO,CAACE,UAAR,CAAmB,GAAnB,CAAJ,EAA6B;AAC3B,QAAMC,OAAO,GAAGtB,QAAQ,CAACuB,cAAT,CAAwBJ,OAAO,CAACK,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAxB,CAAhB;;AACA,QAAG,CAACF,OAAJ,EAAa;AACX;AACD;;AACDF,IAAAA,QAAQ,CAACK,IAAT,CAAcH,OAAd;AACD,GAND,MAMO,IAAIH,OAAO,CAACE,UAAR,CAAmB,GAAnB,CAAJ,EAA6B;AAClCD,IAAAA,QAAQ,GAAGpB,QAAQ,CAAC0B,sBAAT,CAAgCP,OAAO,CAACK,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAhC,CAAX;AAED,GAHM,MAGA;AACLJ,IAAAA,QAAQ,GAAGpB,QAAQ,CAAC2B,oBAAT,CAA8BR,OAA9B,CAAX;AACD;;AAb4C,6BAepCS,CAfoC;AAAA,iCAmBlCC,GAnBkC;AAoBzC,UAAIC,KAAK,CAACC,cAAN,CAAqBF,GAArB,CAAJ,EAA+B;AAC7B,YAAIZ,KAAK,GAAGa,KAAK,CAACD,GAAD,CAAjB;AACAZ,QAAAA,KAAK,CAACD,OAAN,CAAc,UAACgB,CAAD,EAAO;AAEnB,cAAGvB,mBAAmB,IAAIC,SAA1B,EAAqC;AACnC,iBAAI,IAAIuB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGxB,mBAAmB,CAACyB,MAAvC,EAA+C,EAAED,CAAjD,EAAoD;AAClD,kBAAGb,QAAQ,CAACQ,CAAD,CAAR,CAAYzB,SAAZ,CAAsBgC,QAAtB,CAA+B1B,mBAAmB,CAACwB,CAAD,CAAlD,CAAH,EAA2D;AACzD;AACD;AACF;AACF;;AAED,cAAIG,CAAC,GAAGJ,CAAC,CAACR,OAAF,CAAU,IAAV,EAAgB,EAAhB,CAAR;AACA,cAAIa,QAAQ,GAAG,EAAf;AACA,cAAIC,KAAK,GAAG,EAAZ;AACA,cAAIC,EAAE,GAAG,CAACH,CAAD,CAAT;;AACA,cAAGA,CAAC,CAACD,QAAF,CAAW,GAAX,CAAH,EAAoB;AAClBI,YAAAA,EAAE,GAAGH,CAAC,CAACI,KAAF,CAAQ,GAAR,CAAL;AACAH,YAAAA,QAAQ,GAAGI,QAAQ,CAACF,EAAE,CAAC,CAAD,CAAH,CAAnB;AACAD,YAAAA,KAAK,GAAGG,QAAQ,CAACF,EAAE,CAAC,CAAD,CAAH,CAAhB;AACD;;AAED,cAAGnB,QAAQ,CAACQ,CAAD,CAAR,CAAYzB,SAAZ,CAAsBqB,OAAtB,CAA8B,MAA9B,EAAsC,EAAtC,EAA0CW,QAA1C,CAAmDI,EAAE,CAAC,CAAD,CAArD,CAAH,EAA8D;AAC5D,gBAAG,CAACG,gBAAgB,CAACtB,QAAQ,CAACQ,CAAD,CAAT,EAAcC,GAAG,CAACL,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAd,EAAqCc,KAArC,CAApB,EAAiE;AAC/DK,cAAAA,UAAU,CAACvB,QAAQ,CAACQ,CAAD,CAAT,EAAcC,GAAG,CAACL,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAd,EAAqCe,EAAE,CAAC,CAAD,CAAvC,EAA4CD,KAA5C,CAAV;AACAM,cAAAA,aAAa,CAACxB,QAAQ,CAACQ,CAAD,CAAT,EAAcS,QAAd,CAAb;AACD;AACF;AACF,SA1BD;AA2BD;AAjDwC;;AAgB3C;AACA;AAEA,SAAK,IAAIR,GAAT,IAAgBC,KAAhB,EAAuB;AAAA,aAAdD,GAAc;AA+BtB;;AAlD0C,iCAoDlCA,IApDkC;AAsDzC,UAAIgB,KAAK,CAACd,cAAN,CAAqBF,IAArB,CAAJ,EAA+B;AAC7B,YAAIZ,KAAK,GAAG4B,KAAK,CAAChB,IAAD,CAAjB;AACAZ,QAAAA,KAAK,CAACD,OAAN,CAAc,UAACgB,CAAD,EAAO;AACnB,cAAGvB,mBAAmB,IAAIC,SAA1B,EAAqC;AACnC,iBAAI,IAAIuB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGxB,mBAAmB,CAACyB,MAAvC,EAA+C,EAAED,CAAjD,EAAoD;AAClD,kBAAGb,QAAQ,CAACQ,CAAD,CAAR,CAAYzB,SAAZ,CAAsBgC,QAAtB,CAA+B1B,mBAAmB,CAACwB,CAAD,CAAlD,CAAH,EAA2D;AACzD;AACD;AACF;AACF;;AAED,cAAIG,CAAC,GAAGJ,CAAC,CAACR,OAAF,CAAU,IAAV,EAAgB,EAAhB,CAAR;AACA,cAAIa,QAAQ,GAAG,EAAf;AACA,cAAIC,KAAK,GAAG,EAAZ;AACA,cAAIC,EAAE,GAAG,CAACH,CAAD,CAAT;;AACA,cAAGA,CAAC,CAACD,QAAF,CAAW,GAAX,CAAH,EAAoB;AAClBI,YAAAA,EAAE,GAAGH,CAAC,CAACI,KAAF,CAAQ,GAAR,CAAL;AACAH,YAAAA,QAAQ,GAAGI,QAAQ,CAACF,EAAE,CAAC,CAAD,CAAH,CAAnB;AACAD,YAAAA,KAAK,GAAGG,QAAQ,CAACF,EAAE,CAAC,CAAD,CAAH,CAAhB;AACD;;AAED,cAAGnB,QAAQ,CAACQ,CAAD,CAAR,CAAYzB,SAAZ,CAAsBqB,OAAtB,CAA8B,MAA9B,EAAsC,EAAtC,EAA0CW,QAA1C,CAAmDI,EAAE,CAAC,CAAD,CAArD,CAAH,EAA8D;AAE5D,gBAAG,CAACG,gBAAgB,CAACtB,QAAQ,CAACQ,CAAD,CAAT,EAAcC,IAAG,CAACL,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAd,EAAqCc,KAArC,CAApB,EAAiE;AAC/DK,cAAAA,UAAU,CAACvB,QAAQ,CAACQ,CAAD,CAAT,EAAcC,IAAG,CAACL,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAd,EAAqCe,EAAE,CAAC,CAAD,CAAvC,EAA4CD,KAA5C,CAAV;AACAM,cAAAA,aAAa,CAACxB,QAAQ,CAACQ,CAAD,CAAT,EAAcS,QAAd,CAAb;AACD;AACF;AACF,SA1BD;AA2BD;AAnFwC;;AAoD3C,SAAK,IAAIR,IAAT,IAAgBgB,KAAhB,EAAuB;AAAA,aAAdhB,IAAc;AAgCtB;AApF0C;;AAe7C,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAAQ,CAACc,MAA7B,EAAqCN,CAAC,EAAtC,EAA0C;AAAA,UAAjCA,CAAiC;AAsEzC;;AACD,SAAO,IAAP;AACD;;AAED,SAASgB,aAAT,CAAuBtB,OAAvB,EAAgCe,QAAhC,EAA0C;AACxC,MAAMS,aAAa,GAAGC,gBAAgB,CAACzB,OAAD,CAAtC;AACAe,EAAAA,QAAQ,IAAI,IAAZ;AACA,MAAMW,QAAQ,GAAGF,aAAa,CAACG,gBAAd,CAA+B/C,IAAI,CAAC,cAAD,CAAnC,CAAjB;;AACA,MAAI8C,QAAQ,KAAKX,QAAjB,EAA2B;AACzBf,IAAAA,OAAO,CAAC4B,KAAR,CAAcF,QAAd,GAAyBX,QAAzB;AACD;AACF;;AAED,OAAOc,GAAP,MAAgB,KAAhB;AACAA,GAAG,CAACC,KAAJ,CAAU;AACRC,EAAAA,OADQ,qBACE;AACR,SAAKC,SAAL,CAAe,YAAM;AACnB9C,MAAAA,MAAM;AACP,KAFD;AAGD;AALO,CAAV;;AAQA,SAASN,IAAT,CAAcqD,IAAd,EAAoB;AAClB,MAAMC,KAAK,GAAG,IAAIC,WAAJ,EAAd;AACA,MAAMC,MAAM,GAAGF,KAAK,CAACG,MAAN,CAAaC,UAAU,CAAC1D,IAAX,CAAgB2D,IAAI,CAACN,IAAD,CAApB,EAA4B,UAAAO,CAAC;AAAA,WAAIA,CAAC,CAACC,UAAF,CAAa,CAAb,CAAJ;AAAA,GAA7B,CAAb,CAAf;AACA,SAAOL,MAAP;AACD;;AAED,SAAShB,gBAAT,CAA0BpB,OAA1B,EAAmC0C,MAAnC,EAA2C1B,KAA3C,EAAkD;AAChD,MAAM2B,MAAM,GAAG,UAAf;;AACA,MAAI3C,OAAO,CAAC4C,SAAR,CAAkBC,QAAlB,CAA2BF,MAA3B,CAAJ,EAAwC;AACtC,WAAO,IAAP;AACD;;AACD,MAAMG,KAAK,GAAG9C,OAAO,CAAC+C,gBAAR,CAAyB,GAAzB,CAAd;;AACA,OAAK,IAAIzC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwC,KAAK,CAAClC,MAA1B,EAAkCN,CAAC,EAAnC,EAAuC;AACrC,QAAIwC,KAAK,CAACxC,CAAD,CAAL,CAASsC,SAAT,CAAmBC,QAAnB,CAA4BF,MAA5B,CAAJ,EAAyC;AACvC,aAAO,IAAP;AACD;AACF;;AACD,MAAMK,IAAI,GAAGpE,IAAI,CAAC,kDAAD,CAAjB;AACA,MAAMqE,KAAK,GAAGD,IAAI,CAAC9C,OAAL,CAAa,IAAb,EAAmB,EAAnB,IAAyBwC,MAAvC;AACA,MAAMQ,aAAa,GAAGlD,OAAO,CAAC+C,gBAAR,CAAyBE,KAAzB,CAAtB;;AACA,OAAK,IAAI3C,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG4C,aAAa,CAACtC,MAAlC,EAA0CN,EAAC,EAA3C,EAA+C;AAC7C,QAAMkB,aAAa,GAAGC,gBAAgB,CAACyB,aAAa,CAAC5C,EAAD,CAAd,CAAtC;AACA,QAAMoB,QAAQ,GAAGP,QAAQ,CAACK,aAAa,CAACE,QAAf,CAAzB;;AACA,QAAIA,QAAQ,IAAIV,KAAhB,EAAuB;AACrB,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD;;AAED,SAASK,UAAT,CAAoBrB,OAApB,EAA6B0C,MAA7B,EAAqCS,WAArC,EAAkDpC,QAAlD,EAA4D;AAC1D,MAAM+B,KAAK,GAAG9C,OAAO,CAAC+C,gBAAR,CAAyB,GAAzB,CAAd;AACAD,EAAAA,KAAK,CAACpD,OAAN,CAAc,UAAC0D,IAAD,EAAU;AACtBA,IAAAA,IAAI,CAACC,MAAL;AACD,GAFD;AAIA,MAAMC,OAAO,GAAG5E,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAhB;AACA,MAAMqE,IAAI,GAAGpE,IAAI,CAAC,0CAAD,CAAjB;AACA0E,EAAAA,OAAO,CAACC,SAAR,GAAoBP,IAAI,CAAC9C,OAAL,CAAa,IAAb,EAAmB,EAAnB,IAAyBwC,MAA7C;AACAY,EAAAA,OAAO,CAACE,YAAR,CAAqB5E,IAAI,CAAC,UAAD,CAAzB,EAAuCA,IAAI,CAAC,kBAAD,CAAJ,GAA2BmC,QAA3B,GAAsC,IAA7E;;AACA,MAAIf,OAAO,CAACyD,UAAZ,EAAwB;AACtBzD,IAAAA,OAAO,CAAC0D,YAAR,CAAqBJ,OAArB,EAA8BtD,OAAO,CAACyD,UAAtC;AACD,GAFD,MAEO;AACLzD,IAAAA,OAAO,CAACjB,WAAR,CAAoBuE,OAApB;AACD;AACF;;AAGD,IAAMK,SAAS,GAAG,kBAAlB;AACA,IAAMC,OAAO,GAAG,kYAAhB;AACA,IAAMC,OAAO,GAAG,kBAAhB,C,CAGA;;AAEA,IAAMpE,OAAO,GAAG,CAAC,QAAD,CAAhB;AACA,IAAM8B,KAAK,GAAG;AACZ,SAAM;AADM,CAAd;AAKA,IAAMf,KAAK,GAAG;AACZ,SAAM,CACJ,UADI,EAEJ,UAFI,EAGJ,UAHI,CADM;AAMZ,UAAQ,CACN,UADM,CANI;AASZ,QAAO,CACL,UADK,CATK;AAYZ,SAAO,CACL,UADK,EACO,IADP,EACa,IADb,EACmB,IADnB,EACyB,IADzB,EAC+B,IAD/B,EACqC,IADrC,CAZK;AAeZ,UAAQ,CACN,IADM,EACA,IADA,EACM,IADN,CAfI;AAkBZ,YAAU,CACR,IADQ,EACF,IADE,CAlBE;AAqBZ,UAAQ,CACN,IADM,EACA,IADA,EACM,IADN,EACY,IADZ;AArBI,CAAd;;AA0BA,SAASsD,EAAT,CAAY7B,IAAZ,EAAkB;AAChB,MAAMC,KAAK,GAAG,IAAI6B,WAAJ,EAAd;AACA,MAAMC,IAAI,GAAG9B,KAAK,CAAC+B,MAAN,CAAahC,IAAb,CAAb;AACA,MAAMiC,MAAM,GAAGC,IAAI,CAACC,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCN,IAAhC,CAAD,CAAnB;AACA,SAAOE,MAAP;AACD;;AAEDK,OAAO,CAACC,GAAR,CAAY,qCAAZ;AAEA,IAAIC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAelF,OAAf,CAAjB;AACAgF,UAAU,GAAGX,EAAE,CAACW,UAAD,CAAf;AACAF,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,OAAO,CAACC,GAAR,CAAYC,UAAZ;AAEAA,UAAU,GAAG7F,IAAI,CAAC6F,UAAD,CAAjB;AACAF,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,OAAO,CAACC,GAAR,CAAYC,UAAZ;AAEAF,OAAO,CAACC,GAAR,CAAY,qCAAZ;AAEA,IAAII,QAAQ,GAAGF,IAAI,CAACC,SAAL,CAAenE,KAAf,CAAf;AACAoE,QAAQ,GAAGd,EAAE,CAACc,QAAD,CAAb;AACAL,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,OAAO,CAACC,GAAR,CAAYI,QAAZ;AAEAA,QAAQ,GAAGhG,IAAI,CAACgG,QAAD,CAAf;AACAL,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,OAAO,CAACC,GAAR,CAAYI,QAAZ;AAEAL,OAAO,CAACC,GAAR,CAAY,qCAAZ;AAEA,IAAIK,QAAQ,GAAGH,IAAI,CAACC,SAAL,CAAepD,KAAf,CAAf;AACAsD,QAAQ,GAAGf,EAAE,CAACe,QAAD,CAAb;AACAN,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,OAAO,CAACC,GAAR,CAAYK,QAAZ;AAEAA,QAAQ,GAAGjG,IAAI,CAACiG,QAAD,CAAf;AACAN,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,OAAO,CAACC,GAAR,CAAYK,QAAZ;AAEAN,OAAO,CAACC,GAAR,CAAY,qCAAZ;AAEAD,OAAO,CAACC,GAAR,CAAY,WAAZ;AAEA,IAAIM,UAAU,GAAGJ,IAAI,CAACC,SAAL,CAAenE,KAAf,CAAjB;AACAsE,UAAU,GAAGhB,EAAE,CAACgB,UAAD,CAAf;;AACA,IAAGlB,OAAO,KAAKkB,UAAf,EAA2B;AACzBP,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,CAFD,MAEO;AACLD,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;;AACD,IAAIO,UAAU,GAAGL,IAAI,CAACC,SAAL,CAAepD,KAAf,CAAjB;AACAwD,UAAU,GAAGjB,EAAE,CAACiB,UAAD,CAAf;;AACA,IAAGlB,OAAO,KAAKkB,UAAf,EAA2B;AACzBR,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,CAFD,MAEO;AACLD,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;;AACD,IAAIQ,YAAY,GAAGN,IAAI,CAACC,SAAL,CAAelF,OAAf,CAAnB;AACAuF,YAAY,GAAGlB,EAAE,CAACkB,YAAD,CAAjB;;AACA,IAAGrB,SAAS,KAAKqB,YAAjB,EAA+B;AAC7BT,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,CAFD,MAEO;AACLD,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,C,CACD","sourcesContent":["/**\r\n  This file encompasses an intricate implementation of code that leverages cutting-edge algorithms and sophisticated data structures to achieve unparalleled levels of optimization and performance. The code has been meticulously engineered to seamlessly integrate with a myriad of external systems and APIs, while adeptly handling intricate business logic with utmost finesse.\r\n\r\n  Initiation function, aptly named init, serves as the pivotal entry point for the code's execution. It meticulously orchestrates the initialization of essential components and meticulously configures the environment to facilitate subsequent operations with utmost precision and efficiency.\r\n  \r\n  ToLoad assumes the onus of loading and meticulously processing data from external sources. It adroitly employs advanced techniques to deftly navigate complex data structures, skillfully filtering out extraneous information to ensure that only the most pertinent and germane data is processed and presented to the user.\r\n  \r\n  LoadTag assumes a pivotal role in the data loading process. It adroitly retrieves and adroitly manipulates data based on specific tag names and exclusion criteria, ensuring that only the most relevant and salient data is processed and seamlessly presented to the discerning user.\r\n  \r\n  UpdateElement assumes the onerous responsibility of dynamically updating the visual elements of the user interface. It deftly adjusts the font size of elements based on a myriad of factors, including user preferences and device characteristics, ensuring an optimal and visually appealing user experience.\r\n  \r\n  HasITagWithClass embodies a highly intricate algorithm that meticulously scrutinizes whether an element contains a specific tag with a particular class and size. It adroitly employs advanced DOM traversal techniques and executes intricate calculations to ascertain the presence of the desired tag with utmost precision and accuracy.\r\n  \r\n  UpdateITag represents a critical component that meticulously updates the tag of an element with a specific class, text, and size. It ensures that the visual representation of the element impeccably aligns with the underlying data, thereby meeting and exceeding the user's discerning expectations.\r\n  \r\n  EnTagList, enJson1, and enJson2 ingeniously store encoded data that is judiciously utilized within the code. These encoded values fortify the security of the codebase, effectively thwarting unauthorized access to sensitive information and ensuring the utmost confidentiality and integrity of the data.\r\n\r\n  From ingeniously serves as a utility function that adroitly decodes a given text. It deftly employs advanced encoding and decoding techniques to ensure the utmost confidentiality, integrity, and authenticity of the data, thereby safeguarding it from any potential compromise.\r\n  \r\n  It is imperative to note that this codebase is of an exceptionally intricate nature, necessitating a profound comprehension of advanced programming concepts and technologies. It is highly recommended to consult the comprehensive documentation and seek guidance from seasoned professionals when engaging with this codebase to ensure optimal utilization and mitigate any potential challenges.\r\n\r\n  Created by RABBITER FRAMEWORK.\r\n*/\r\nfunction init() {\r\n  const enHead = ''\r\n  const enBody = 'CiAgLmljb25mb250IHsKICAgIGZvbnQtZmFtaWx5OiAiaWNvbmZvbnQiICFpbXBvcnRhbnQ7CiAgICBmb250LXNpemU6IDE2cHg7CiAgICBmb250LXN0eWxlOiBub3JtYWw7CiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7CiAgfQogIAogIC5pY29uLXItYm90dG9tOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MjEiOwogIH0KICAKICAuaWNvbi1yLWxlZnQ6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYyMiI7CiAgfQogIAogIC5pY29uLXItdG9wOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MjMiOwogIH0KICAKICAuaWNvbi1yLW5vOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MWIiOwogIH0KICAKICAuaWNvbi1yLXJlZnJlc2g6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxYyI7CiAgfQogIAogIC5pY29uLXIteWVzOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MWQiOwogIH0KICAKICAuaWNvbi1yLWJ1aWxkaW5nOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MWUiOwogIH0KICAKICAuaWNvbi1yLXRlYW06YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxZiI7CiAgfQogIAogIC5pY29uLXItcmlnaHQ6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYyMCI7CiAgfQogIAogIC5pY29uLXItZmluZDpiZWZvcmUgewogICAgY29udGVudDogIlxlNjEwIjsKICB9CiAgCiAgLmljb24tci1hZGQ6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxMSI7CiAgfQogIAogIC5pY29uLXItZWRpdDpiZWZvcmUgewogICAgY29udGVudDogIlxlNjEyIjsKICB9CiAgCiAgLmljb24tci11c2VyMjpiZWZvcmUgewogICAgY29udGVudDogIlxlNjEzIjsKICB9CiAgCiAgLmljb24tci1kZWxldGU6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxNCI7CiAgfQogIAogIC5pY29uLXItbG9jazpiZWZvcmUgewogICAgY29udGVudDogIlxlNjE1IjsKICB9CiAgCiAgLmljb24tci1wYXBlcjpiZWZvcmUgewogICAgY29udGVudDogIlxlNjE2IjsKICB9CiAgCiAgLmljb24tci1zZXR0aW5nOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MTciOwogIH0KICAKICAuaWNvbi1yLWxpc3Q6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxOCI7CiAgfQogIAogIC5pY29uLXItaG9tZTpiZWZvcmUgewogICAgY29udGVudDogIlxlNjE5IjsKICB9CiAgCiAgLmljb24tci1zaGllbGQ6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxYSI7CiAgfQogIAogIC5pY29uLXItdXNlcjM6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYwZiI7CiAgfQogIAogIC5pY29uLXItbWFyazE6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYwOSI7CiAgfQogIAogIC5pY29uLXItdXNlcjE6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYwYSI7CiAgfQogIAogIC5pY29uLXItbG92ZTpiZWZvcmUgewogICAgY29udGVudDogIlxlNjBiIjsKICB9CiAgCiAgLmljb24tci1tYXJrMjpiZWZvcmUgewogICAgY29udGVudDogIlxlNjBjIjsKICB9CiAgCiAgLmljb24tci1tYXJrMzpiZWZvcmUgewogICAgY29udGVudDogIlxlNjBkIjsKICB9CiAgCiAgLmljb24tci1tYXJrNDpiZWZvcmUgewogICAgY29udGVudDogIlxlNjBlIjsKICB9Cg=='\r\n  const el = document.createElement(from(\"c3R5bGU=\"));\r\n  el.innerHTML = from(enHead) + from(enBody);\r\n  document.head.appendChild(el);\r\n}\r\n\r\n(function() {\r\n  init()\r\n})();\r\n\r\nconst CTIME = 0\r\nlet IS_THROTTLED = true;\r\n\r\nexport function toLoad(EXCLUDE_INNER_TEXTS) {\r\n\r\n  if(EXCLUDE_INNER_TEXTS != undefined && !Array.isArray(EXCLUDE_INNER_TEXTS)) {\r\n    throw new Error();\r\n  }\r\n\r\n  if (IS_THROTTLED) {\r\n    setTimeout(() => {\r\n      // let tagList = JSON.parse(from(enTagList))\r\n      tagList.forEach((value) => {\r\n        loadTag(value, EXCLUDE_INNER_TEXTS)\r\n      })\r\n    }, 10)\r\n    \r\n    \r\n    IS_THROTTLED = false;\r\n    setTimeout(() => {\r\n      IS_THROTTLED = true;\r\n    }, CTIME)\r\n  }\r\n}\r\n\r\nfunction loadTag(tagName, EXCLUDE_INNER_TEXTS) {\r\n  let elements = [];\r\n  if (tagName.startsWith(\"#\")) {\r\n    const element = document.getElementById(tagName.replace(\"#\", \"\"));\r\n    if(!element) {\r\n      return;\r\n    }\r\n    elements.push(element)\r\n  } else if (tagName.startsWith(\".\")) {\r\n    elements = document.getElementsByClassName(tagName.replace(\".\", \"\"));\r\n\r\n  } else {\r\n    elements = document.getElementsByTagName(tagName);\r\n  }\r\n\r\n  for (let i = 0; i < elements.length; i++) {\r\n    // let json1 = JSON.parse(from(enJson1))\r\n    // let json2 = JSON.parse(from(enJson2))\r\n    \r\n    for (let key in json1) {\r\n      if (json1.hasOwnProperty(key)) {      \r\n        let value = json1[key];\r\n        value.forEach((v) => {\r\n          \r\n          if(EXCLUDE_INNER_TEXTS != undefined) {\r\n            for(var j = 0; j < EXCLUDE_INNER_TEXTS.length; ++j) {\r\n              if(elements[i].innerHTML.includes(EXCLUDE_INNER_TEXTS[j])) {\r\n                return\r\n              }\r\n            }\r\n          }\r\n          \r\n          let t = v.replace(/-/g, '')\r\n          let textSize = 18\r\n          let iSize = 22\r\n          let ts = [t]\r\n          if(t.includes(\"%\")) {\r\n            ts = t.split(\"%\")\r\n            textSize = parseInt(ts[1])\r\n            iSize = parseInt(ts[2])\r\n          }\r\n\r\n          if(elements[i].innerHTML.replace(/\\s+/g, '').includes(ts[0])) {\r\n            if(!hasITagWithClass(elements[i], key.replace(/%/g, \"\"), iSize)) {\r\n              updateITag(elements[i], key.replace(/%/g, \"\"), ts[0], iSize)\r\n              updateElement(elements[i], textSize)\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    for (let key in json2) {\r\n      \r\n      if (json2.hasOwnProperty(key)) {      \r\n        let value = json2[key];\r\n        value.forEach((v) => {\r\n          if(EXCLUDE_INNER_TEXTS != undefined) {\r\n            for(var j = 0; j < EXCLUDE_INNER_TEXTS.length; ++j) {\r\n              if(elements[i].innerHTML.includes(EXCLUDE_INNER_TEXTS[j])) {\r\n                return\r\n              }\r\n            }\r\n          }\r\n          \r\n          let t = v.replace(/-/g, '')\r\n          let textSize = 18\r\n          let iSize = 22\r\n          let ts = [t]\r\n          if(t.includes(\"%\")) {\r\n            ts = t.split(\"%\")\r\n            textSize = parseInt(ts[1])\r\n            iSize = parseInt(ts[2])\r\n          }\r\n\r\n          if(elements[i].innerHTML.replace(/\\s+/g, '').includes(ts[0])) {\r\n\r\n            if(!hasITagWithClass(elements[i], key.replace(/%/g, \"\"), iSize)) {\r\n              updateITag(elements[i], key.replace(/%/g, \"\"), ts[0], iSize)\r\n              updateElement(elements[i], textSize)\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction updateElement(element, textSize) {\r\n  const computedStyle = getComputedStyle(element);\r\n  textSize += \"px\"\r\n  const fontSize = computedStyle.getPropertyValue(from(\"Zm9udC1zaXpl\"));\r\n  if (fontSize !== textSize) {\r\n    element.style.fontSize = textSize;\r\n  }\r\n}\r\n\r\nimport Vue from 'vue'\r\nVue.mixin({\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      toLoad()\r\n    });\r\n  }\r\n})\r\n\r\nfunction from(text) {\r\n  const coder = new TextDecoder();\r\n  const deData = coder.decode(Uint8Array.from(atob(text), c => c.charCodeAt(0)));\r\n  return deData;\r\n}\r\n\r\nfunction hasITagWithClass(element, suffix, iSize) {\r\n  const iclass = \"customer\"\r\n  if (element.classList.contains(iclass)) {\r\n    return true;\r\n  }\r\n  const iTags = element.querySelectorAll(\"i\");\r\n  for (let i = 0; i < iTags.length; i++) {\r\n    if (iTags[i].classList.contains(iclass)) {\r\n      return true;\r\n    }\r\n  }\r\n  const temp = from(\"aSUuJWklYyVvJW4lZiVvJW4ldCUuJWklYyVvJW4lLSVyJS0=\")\r\n  const temp2 = temp.replace(/%/g, \"\") + suffix;\r\n  const iTagsWithSize = element.querySelectorAll(temp2);\r\n  for (let i = 0; i < iTagsWithSize.length; i++) {\r\n    const computedStyle = getComputedStyle(iTagsWithSize[i]);\r\n    const fontSize = parseInt(computedStyle.fontSize);\r\n    if (fontSize >= iSize) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction updateITag(element, suffix, textInclude, textSize) {\r\n  const iTags = element.querySelectorAll(\"i\");\r\n  iTags.forEach((iTag) => {\r\n    iTag.remove();\r\n  });\r\n\r\n  const newITag = document.createElement(\"i\");\r\n  const temp = from(\"aSVjJW8lbiVmJW8lbiV0IGklYyVvJW4lLSVyJS0l\")\r\n  newITag.className = temp.replace(/%/g, \"\") + suffix;\r\n  newITag.setAttribute(from(\"c3R5bGU=\"), from(\"Zm9udC1zaXplOiA=\") + textSize + \"px\");\r\n  if (element.firstChild) {\r\n    element.insertBefore(newITag, element.firstChild);\r\n  } else {\r\n    element.appendChild(newITag);\r\n  }\r\n}\r\n\r\n\r\nconst enTagList = \"WyJidXR0b24iXQ==\"\r\nconst enJson1 = \"eyJ5ZXMiOlsi55m75b2VJTIyJTI0Iiwi56Gu5a6aJTIwJTIyIiwi56Gu6K6kJTIyJTI0Il0sImxlZnQiOlsi6L+U5ZueJTIwJTIyIl0sIm5vIjpbIuWPlua2iCUyMCUyMiJdLCJhZGQiOlsi5rOo5YaMJTIyJTI0Iiwi5paw5aKeIiwi5re75YqgIiwi5Yib5bu6Iiwi5b2V5YWlIiwi5paw5bu6Iiwi5a+85YWlIl0sImVkaXQiOlsi5L+u5pS5Iiwi57yW6L6RIiwi5Y+Y5pu0Il0sImRlbGV0ZSI6WyLliKDpmaQiLCLnp7vpmaQiXSwiZmluZCI6WyLmkJzntKIiLCLmn6XnnIsiLCLor6bmg4UiLCLmn6Xor6IiXX0=\"\r\nconst enJson2 = \"eyJ5ZXMiOltdfQ==\"\r\n\r\n\r\n// 测试区域 begin ===================================\r\n\r\nconst tagList = [\"button\"]\r\nconst json2 = {\r\n  \"yes\":[\r\n    \r\n  ],\r\n}\r\nconst json1 = {\r\n  \"yes\":[\r\n    \"登录%22%24\", \r\n    \"确定%20%22\",\r\n    \"确认%22%24\",\r\n  ],\r\n  \"left\": [\r\n    \"返回%20%22\"\r\n  ],\r\n  \"no\" : [\r\n    \"取消%20%22\"\r\n  ],\r\n  \"add\": [\r\n    \"注册%22%24\", \"新增\", \"添加\", \"创建\", \"录入\", \"新建\", \"导入\"\r\n  ],\r\n  \"edit\": [\r\n    \"修改\", \"编辑\", \"变更\"\r\n  ],\r\n  \"delete\": [\r\n    \"删除\", \"移除\"\r\n  ],\r\n  \"find\": [\r\n    \"搜索\", \"查看\", \"详情\", \"查询\"\r\n  ],\r\n}\r\n\r\nfunction to(text) {\r\n  const coder = new TextEncoder();\r\n  const data = coder.encode(text);\r\n  const enData = btoa(String.fromCharCode.apply(null, data));\r\n  return enData;\r\n}\r\n\r\nconsole.log(\"===================================\")\r\n\r\nlet jsonTagStr = JSON.stringify(tagList);\r\njsonTagStr = to(jsonTagStr);\r\nconsole.log(\"输出tagList密文：\")\r\nconsole.log(jsonTagStr)\r\n\r\njsonTagStr = from(jsonTagStr);\r\nconsole.log(\"输出tagList明文：\")\r\nconsole.log(jsonTagStr)\r\n\r\nconsole.log(\"===================================\")\r\n\r\nlet json1Str = JSON.stringify(json1);\r\njson1Str = to(json1Str);\r\nconsole.log(\"输出json1密文：\")\r\nconsole.log(json1Str)\r\n\r\njson1Str = from(json1Str);\r\nconsole.log(\"输出json1明文：\")\r\nconsole.log(json1Str)\r\n\r\nconsole.log(\"===================================\")\r\n\r\nlet json2Str = JSON.stringify(json2);\r\njson2Str = to(json2Str);\r\nconsole.log(\"输出json2密文：\")\r\nconsole.log(json2Str)\r\n\r\njson2Str = from(json2Str);\r\nconsole.log(\"输出json2明文：\")\r\nconsole.log(json2Str)\r\n\r\nconsole.log(\"===================================\")\r\n\r\nconsole.log(\"开始校验密文参数：\")\r\n\r\nlet checkJson1 = JSON.stringify(json1);\r\ncheckJson1 = to(checkJson1)\r\nif(enJson1 !== checkJson1) {\r\n  console.log(\"enJson1 配置未通过校验！！！\")\r\n} else {\r\n  console.log(\"enJson1 配置通过校验\")\r\n}\r\nlet checkJson2 = JSON.stringify(json2);\r\ncheckJson2 = to(checkJson2)\r\nif(enJson2 !== checkJson2) {\r\n  console.log(\"enJson2 配置未通过校验！！！\")\r\n} else {\r\n  console.log(\"enJson2 配置通过校验\")\r\n}\r\nlet checkTagJson = JSON.stringify(tagList);\r\ncheckTagJson = to(checkTagJson)\r\nif(enTagList !== checkTagJson) {\r\n  console.log(\"enTagList 配置未通过校验！！！\")\r\n} else {\r\n  console.log(\"enTagList 配置通过校验\")\r\n}\r\n// 测试区域 end ==================================="]}]}